/* CVS $Id: $ */
package com.genohm.boinq.generated.vocabularies; 
import org.apache.jena.rdf.model.*;
import org.apache.jena.ontology.*;
 
/**
 * Vocabulary definitions from file:C:\Users\Jim\Desktop\workspace\boinq\ontologies/format.owl 
 * @author Auto-generated by schemagen on 26 Feb 2016 12:28 
 */
public class FormatVocab {
    /** <p>The ontology model that holds the vocabulary terms</p> */
    private static OntModel m_model = ModelFactory.createOntologyModel( OntModelSpec.OWL_MEM, null );
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.boinq.org/iri/ontologies/format#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>points to CIGAR value as defined by:</p> */
    public static final DatatypeProperty hasCIGAR = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasCIGAR" );
    
    /** <p>points to FLAG value as defined by:</p> */
    public static final DatatypeProperty hasFLAG = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasFLAG" );
    
    /** <p>points to MAPQ value as defined by:</p> */
    public static final DatatypeProperty hasMAPQ = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasMAPQ" );
    
    /** <p>points to PNEXT value as defined by:</p> */
    public static final DatatypeProperty hasPNEXT = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasPNEXT" );
    
    /** <p>points to POS value as defined by:</p> */
    public static final DatatypeProperty hasPOS = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasPOS" );
    
    /** <p>points to QNAME value as defined by:</p> */
    public static final DatatypeProperty hasQNAME = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasQNAME" );
    
    /** <p>points to QUAL as defined by:</p> */
    public static final DatatypeProperty hasQUAL = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasQUAL" );
    
    /** <p>points to RNAME value as defined by:</p> */
    public static final DatatypeProperty hasRNAME = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasRNAME" );
    
    /** <p>points to RNEXT value as defined by</p> */
    public static final DatatypeProperty hasRNEXT = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasRNEXT" );
    
    /** <p>points to SEQ as defined by:</p> */
    public static final DatatypeProperty hasSEQ = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasSEQ" );
    
    /** <p>points to TLEN value as defined by:</p> */
    public static final DatatypeProperty hasTLEN = m_model.createDatatypeProperty( "http://www.boinq.org/iri/ontologies/format#hasTLEN" );
    
    /** <p>One line found back in a SAM/BAM file not including the header</p> */
    public static final OntClass SamEntry = m_model.createClass( "http://www.boinq.org/iri/ontologies/format#SamEntry" );
    
// INDIVIDUALS
}
